<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="site.dealim.jobconsulting.mapper.MemberMapper">

    <!-- Member 매핑-->
    <resultMap type="Member" id="memberMap">
        <id property="idx" column="idx"/>

        <result property="name" column="name"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="birthDate" column="birth_date"/>
        <result property="gender" column="gender"/>
        <result property="phone" column="phone"/>
        <result property="comIdx" column="com_idx"/>
        <result property="resumeFile" column="resume_file"/>
        <result property="desiredInterviewDate" column="desired_interview_date"/>
        <result property="assignedInterviewDate" column="assigned_interview_date"/>
        <result property="isInterviewDate" column="is_interview_date"/>
        <result property="interviewComment" column="interview_comment"/>
        <result property="isCoverLetter" column="is_cover_letter"/>
        <result property="isResume" column="is_resume"/>
        <result property="joinDate" column="join_date"/>
        <result property="modifiedDate" column="modified_date"/>
        <result property="withdrawnDate" column="withdrawn_date"/>
        <result property="isWithdrawn" column="is_withdrawn"/>

        <collection property="roleList" resultMap="memberRoleMap"></collection>
    </resultMap>

    <!-- MemberRole 매핑 -->
    <resultMap type="MemberRole" id="memberRoleMap">
        <id property="roleIdx" column="role_idx"/>
        <result property="roleName" column="role_name"/>
        <result property="username" column="username"/>
    </resultMap>

    <!-- 회원 등록 -->
    <insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyProperty="idx">
        <selectKey keyColumn="idx" keyProperty="idx" order="AFTER" resultType="Long">
            SELECT LAST_INSERT_ID() AS idx
        </selectKey>

        INSERT INTO member (name, username, password, email, birth_date, gender, phone, com_idx, resume_file,
        desired_interview_date, assigned_interview_date, is_interview_date, interview_comment,
        is_cover_letter, is_resume, join_date, modified_date, withdrawn_date, is_withdrawn)
        VALUES (#{name}, #{username}, #{password}, #{email}, #{birthDate}, #{gender}, #{phone}, #{comIdx},
        #{resumeFile}, #{desiredInterviewDate}, #{assignedInterviewDate}, #{isInterviewDate},
        #{interviewComment}, #{isCoverLetter}, #{isResume}, #{joinDate}, #{modifiedDate}, #{withdrawnDate},
        #{isWithdrawn})
    </insert>

    <!-- 회원 조회 -->
    <select id="selectMember" resultMap="memberMap">
        SELECT *
        FROM member
        WHERE idx = #{idx}
    </select>

    <!-- 회원 조회 - id -->
    <select id="login" resultMap="memberMap">
        SELECT m.idx
             , m.name
             , m.username
             , m.password
             , m.email
             , m.birth_date
             , m.gender
             , m.phone
             , m.com_idx
             , m.resume_file
             , m.desired_interview_date
             , m.assigned_interview_date
             , m.is_interview_date
             , m.interview_comment
             , m.is_cover_letter
             , m.is_resume
             , m.join_date
             , m.modified_date
             , m.withdrawn_date
             , m.is_withdrawn
             , r.role_idx
             , r.role_name
             , r.username as role_username
        FROM member m
                 LEFT OUTER JOIN member_role r ON m.username = r.username
        WHERE m.username = #{username}
    </select>

    <!-- 회원 권한 등록 -->
    <insert id="insertMemberRole" parameterType="MemberRole">
        <!-- 가입된 회원의 idx 값을 얻기 위해 selectKey 사용 -->
        <selectKey keyColumn="idx" keyProperty="idx" order="AFTER" resultType="Long">
            SELECT LAST_INSERT_ID() AS idx
        </selectKey>

        INSERT INTO member_role (role_name, username)
        VALUES (#{roleName}, #{username})
    </insert>

    <!-- 회원 수정 -->
    <update id="updateMember">
        UPDATE member
        SET name                    = #{name},
            password                = #{password},
            email                   = #{email},
            birth_date              = #{birthDate},
            gender                  = #{gender},
            phone                   = #{phone},
            com_idx                 = #{comIdx},
            resume_file             = #{resumeFile},
            desired_interview_date  = #{desiredInterviewDate},
            assigned_interview_date = #{assignedInterviewDate},
            is_interview_date       = #{isInterviewDate},
            interview_comment       = #{interviewComment},
            is_cover_letter         = #{isCoverLetter},
            is_resume               = #{isResume},
            join_date               = #{joinDate},
            modified_date           = #{modifiedDate},
            withdrawn_date          = #{withdrawnDate},
            is_withdrawn            = #{isWithdrawn}
        WHERE username = #{username}
    </update>

    <!-- 회원 삭제 -->
    <delete id="deleteMember">
        DELETE
        FROM member
        WHERE username = #{username}
    </delete>

    <!-- 회원 중복 확인 -->
    <select id="checkDuplicateUsername" resultType="int">
        SELECT count(*) FROM member WHERE username = #{username}
    </select>

    <!-- 회원 프로그램 등록 -->
    <update id="updatePgIdx" parameterType="map">
        UPDATE member
        SET pg_idx = #{pgIdx}
        WHERE idx = #{memIdx}
    </update>

    <!-- 회원 프로그램 승인 상태 수정 -->
    <update id="updateByPgIdx" parameterType="Long">

    </update>

    <!-- 프로그램 별 승인된 멤버 수 -->
    <select id="getApprovedCntByPgIdx" resultType="Integer" parameterType="Long">
        SELECT COUNT(*)
        FROM member m
                 LEFT OUTER JOIN program p ON m.pg_idx = p.pg_idx
        WHERE m.pg_reg_status = 'Aprroved' and m.pg_idx = #{param}
    </select>

    <!-- 프로그램 별 미확인 멤버 수 -->
    <select id="getPendingCntByPgIdx" resultType="Integer" parameterType="Long">
        SELECT COUNT(*)
        FROM member m
                 LEFT OUTER JOIN program p ON m.pg_idx = p.pg_idx
        WHERE m.pg_reg_status = 'Pending' and m.pg_idx = #{param}
    </select>

    <!-- 프로그램 별 불합격자 멤버 수 -->
    <select id="getRejectedCntByPgIdx" resultType="Integer" parameterType="Long">
        SELECT COUNT(*)
        FROM member m
                 LEFT OUTER JOIN program p ON m.pg_idx = p.pg_idx
        WHERE m.pg_reg_status = 'Rejected' and m.pg_idx = #{param}
    </select>

</mapper>