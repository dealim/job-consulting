<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="site.dealim.jobconsulting.mapper.MemberMapper">

    <!-- Member 매핑-->
    <resultMap type="site.dealim.jobconsulting.domain.Member" id="memberMap">
        <id property="idx" column="idx"/>
        <result property="name" column="name"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="address" column="address"/> <!-- 추가된 주소 필드 -->
        <result property="birthDate" column="birth_date"/>
        <result property="gender" column="gender"/>
        <result property="phone" column="phone"/>
        <result property="comIdx" column="com_idx"/>
        <result property="pgIdx" column="pg_idx"/>
        <result property="pgRegStatus" column="pg_reg_status"/>
        <result property="pgRegDate" column="pg_reg_date"/> <!-- 추가된 프로그램 등록 날짜 필드 -->
        <result property="resumeFile" column="resume_file"/>
        <result property="desiredInterviewDate" column="desired_interview_date"/>
        <result property="assignedInterviewDate" column="assigned_interview_date"/>
        <result property="interviewStatus" column="interview_status"/>
        <result property="coverLetterStatus" column="cover_letter_status"/>
        <result property="resumeStatus" column="resume_status"/>
        <result property="interviewComment" column="interview_comment"/>
        <result property="joinDate" column="join_date"/>
        <result property="modifiedDate" column="modified_date"/>
        <result property="withdrawnDate" column="withdrawn_date"/>
        <result property="isWithdrawn" column="is_withdrawn"/>
        <result property="profileImg" column="profile_img"/>

        <collection property="roleList" resultMap="memberRoleMap"/>
    </resultMap>

    <!-- MemberRole 매핑 -->
    <resultMap type="MemberRole" id="memberRoleMap">
        <id property="roleIdx" column="role_idx"/>
        <result property="roleName" column="role_name"/>
        <result property="username" column="username"/>
    </resultMap>

    <!-- 멤버 목록 페이지 조회(USER 권한 멤버, 특정 회사 멤버) -->
    <select id="getMemberListPage" parameterType="map" resultType="member">
        SELECT *
        FROM member
        WHERE username IN (SELECT m.username
                           FROM member m
                                    LEFT JOIN member_role r ON m.username = r.username
                           WHERE m.com_idx = #{comIdx}
                           GROUP BY m.username
                           HAVING COUNT(m.username) = 1)
        ORDER BY join_date DESC
        LIMIT #{pageable.pageSize}
        OFFSET #{pageable.offset}
    </select>

    <select id="getMemberTotalCnt" resultType="int" parameterType="Long">
        SELECT COUNT(*) AS CNT
        FROM member
        WHERE com_idx = #{param}
    </select>

    <!-- user 권한만 가진 멤버 조회 -->
    <select id="selectAllMembers" resultMap="memberMap">
        SELECT *
        FROM member
        WHERE username IN (SELECT m.username
                           FROM member m
                                    LEFT JOIN member_role r ON m.username = r.username
                           GROUP BY m.username
                           HAVING count(m.username) = 1)
    </select>

    <!-- 회원 등록 -->
    <insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO member (
            name, username, password, email, address, zip_code, birth_date, gender, phone, com_idx,
            pg_idx, pg_reg_status, pg_reg_date, resume_file, desired_interview_date,
            assigned_interview_date, interview_status, interview_comment, cover_letter_status,
            resume_status, withdrawn_date, is_withdrawn, profile_img
        )
        VALUES (
                   #{name}, #{username}, #{password}, #{email}, #{address}, #{zipCode}, #{birthDate}, #{gender},
                   #{phone}, #{comIdx}, #{pgIdx}, #{pgRegStatus}, #{pgRegDate}, #{resumeFile},
                   #{desiredInterviewDate}, #{assignedInterviewDate}, #{interviewStatus},
                   #{interviewComment}, #{coverLetterStatus}, #{resumeStatus}, #{withdrawnDate}, #{isWithdrawn}, #{profileImg}
               )
    </insert>

    <!-- 회원 조회 -->
    <select id="selectMember" resultMap="memberMap">
        SELECT *
        FROM member
        WHERE idx = #{idx}
    </select>

    <!-- 회원 조회 - id -->
    <select id="login" resultMap="memberMap">
        SELECT m.*, r.*
        FROM member m
                 JOIN member_role r ON m.username = r.username
        WHERE m.username = #{username}
    </select>

    <!-- 회원 권한 등록 -->
    <insert id="insertMemberRole" parameterType="MemberRole">
        <!-- 가입된 회원의 idx 값을 얻기 위해 selectKey 사용 -->
        <!--<selectKey keyColumn="idx" keyProperty="idx" order="AFTER" resultType="Long">
            SELECT LAST_INSERT_ID() AS idx
        </selectKey>-->
        INSERT INTO member_role (role_name, username)
        VALUES (#{roleName}, #{username})
    </insert>

    <!-- 회원 수정 -->
    <update id="updateMember">
        UPDATE member
        SET name                    = #{name},
            password                = #{password},
            email                   = #{email},
            birth_date              = #{birthDate},
            gender                  = #{gender},
            phone                   = #{phone},
            com_idx                 = #{comIdx},
            resume_file             = #{resumeFile},
            desired_interview_date  = #{desiredInterviewDate},
            assigned_interview_date = #{assignedInterviewDate},
            interview_status       = #{interviewStatus},
            interview_comment       = #{interviewComment},
            coverLetterStatus         = #{coverLetterStatus},
            resume_status               = #{resumeStatus},
            join_date               = #{joinDate},
            modified_date           = #{modifiedDate},
            withdrawn_date          = #{withdrawnDate},
            is_withdrawn            = #{isWithdrawn}
        WHERE username = #{username}
    </update>

    <!-- 회원 삭제 -->
    <delete id="deleteMember">
        DELETE
        FROM member
        WHERE username = #{username}
    </delete>

    <!-- 회원 중복 확인 -->
    <select id="checkDuplicateUsername" resultType="int">
        SELECT count(*)
        FROM member
        WHERE username = #{username}
    </select>

    <!-- 회원에 comidx 수정 -->
    <update id="updateCompanyIdx" parameterType="map">
        UPDATE member
        SET com_idx = #{comIdx}
        WHERE idx = #{memIdx}
    </update>

    <!-- 회원 프로그램 등록 -->
    <update id="updatePgIdx" parameterType="map">
        UPDATE member
        SET pg_idx = #{pgIdx}
        WHERE idx = #{memIdx}
    </update>

    <!-- 회원 프로그램 승인 상태 수정 -->
    <update id="updatePgRegStatus" parameterType="Map">
        UPDATE member
        SET pg_reg_status = #{pgRegStatus}
        WHERE idx = #{memIdx}
    </update>

    <!-- 프로그램 신청 취소 -->
    <update id="cancelRegister" parameterType="Long">
        UPDATE member
        SET pg_reg_status = null,
            com_idx    = null,
            pg_idx     = null
        WHERE idx = #{param}
    </update>

    <!-- 총 신청자 수 -->
    <select id="getRegCntByPgIdx" resultType="Integer" parameterType="Long">
        SELECT COUNT(*)
        FROM member m
                 JOIN program p ON m.pg_idx = p.pg_idx
        WHERE m.pg_idx = #{param}
    </select>

    <!-- 프로그램 신청자 상태별 멤버 수 -->
    <select id="getNumByPgIdxAndpgRegStatus" resultType="Integer" parameterType="Map">
        SELECT COUNT(*)
        FROM member m
                 JOIN program p ON m.pg_idx = p.pg_idx
        WHERE m.pg_reg_status = #{pgRegStatus}
          and m.pg_idx = #{pgIdx}
    </select>

    <!-- mypg -->
    <update id="interviewTimeSave" parameterType="map">
        UPDATE member
        SET desired_interview_date = #{desiredInterviewDate}
        WHERE idx = #{idx}
    </update>

</mapper>